@page "/exercise-08-01"

@using Exercise1.Classes.Chapter_08_Loops

<h3>Orders</h3>
<div class="form-row">
    <div class="col-auto">
        <input class="form-control" placeholder="Customer name" @bind="customer" />
    </div>
    <div class="col-auto">
        <input class="form-control" placeholder="Customer address" @bind="address" />
    </div>
    <div class="col-auto">
        <button class="btn-padding btn-primary" @onclick="AddOrder">Add</button>
    </div>
</div>

<ul class="no-list-style no-left-padding">


    @foreach (var order in orders.Get())
    {
        <li>
            <input type="button" value="@order.Id @order.Customer (@order.Address)" class="btn btn-link text-decoration-none" @onclick="@(e => CurrentOrder(order))" />
        </li>
    }
</ul>
@if (currentOrder != default)
{
    <h5>Line items for: @currentOrder.Id @currentOrder.Customer (@currentOrder.Address)</h5>

    <div class="form-row">
        <div class="form-group col-6">
            <label for="inputProductName">Product Name</label>
            <input @bind="@product" class="form-control" id="inputProductName" placeholder="Product Name" />
        </div>
        <div class="form-group col-1">
            <label for="inputCount">Count</label>
            <input @bind="@quantity" class="form-control" id="inputCount" />
        </div>
        <div class="form-group col-2">
            <label for="inputPrice">Price</label>
            <input @bind="@price" class="form-control" id="inputPrice" />
        </div>
        <div class="form-group col-2">
            <label for="inputVat">Vat</label>
            <input @bind="@vat" class="form-control" id="inputVat" />
        </div>
        <div class="form-group col-auto">
            <button class="btn btn-primary btn-top-margin btn-padding" @onclick="AddLineItem">Add</button>
        </div>
    </div>

    if (currentOrder.Items.Count > 0)
    {
        <table class="table table-sm">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Id</th>
                    <th scope="col">Product</th>
                    <th scope="col">Quantity</th>
                    <th scope="col">Price</th>
                    <th scope="col">VAT %</th>
                    <th scope="col">VAT $</th>
                    <th scope="col">Total</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in currentOrder.Items)
                {
                    <tr>
                        <th scope="row">@item.Id</th>
                        <td>@item.Product</td>
                        <td>@item.Quantity</td>
                        <td>@item.Price</td>
                        <td>@(item.Vat * 100)</td>
                        <td>@item.VatCost</td>
                        <td>@item.Total</td>
                    </tr>

                }
            </tbody>
        </table>
    }
}


@if(error != string.Empty)
{
    <div class="alert alert-danger" role="alert">
        <strong>Error </strong>@error
    </div>
}

@code {

    string error = string.Empty;

    string customer = string.Empty;
    string address = string.Empty;
    OrderFactory orders = new OrderFactory();

    Order currentOrder = default;
    string product = string.Empty;
    int quantity = default;
    double price = default;
    double vat = default;


    void AddOrder()
    {
        try
        {
            //if (customer == string.Empty || address == string.Empty) return;
            orders.Add(customer, address);
            CurrentOrder(orders.Latest());
            customer = string.Empty;
            address = string.Empty;
        }
        catch (Exception ex)
        {

            error = ex.Message;
        }
    }


    void CurrentOrder(Order order)
    {
        currentOrder = order;
    }

    void AddLineItem()
    {
        try
        {
            //if (product == string.Empty || quantity < 1 || price <= 0 || vat < 0) return;

            currentOrder.AddLineItem(product, quantity, price, vat);

            product = string.Empty;
            quantity = default;
            price = default;
            vat = default;
        }
        catch (Exception ex)
        {

            error = ex.Message;
        }
    }

}
