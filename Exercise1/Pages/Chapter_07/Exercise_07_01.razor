@page "/exercise-07-01"


@using Exercise1.Classes.Chapter_07_Conditionals

<h3>Calculator</h3>
<input @bind="input" readonly style="width:145px" />
<br />
<button class="calc-btn-size-sm btn-sm btn-light" @onclick="@(el => AppnedDigit(1))">1</button>
<button class="calc-btn-size-sm btn-sm btn-light" @onclick="@(el => AppnedDigit(2))">2</button>
<button class="calc-btn-size-sm btn-sm btn-light" @onclick="@(el => AppnedDigit(3))">3</button>

<button class="calc-btn-size-sm btn-sm btn-light" @onclick="@(el => AddOperation(Operators.Multiply))">x</button>
<br />

<button class="calc-btn-size-sm btn-sm btn-light" @onclick="@(el => AppnedDigit(4))">4</button>
<button class="calc-btn-size-sm btn-sm btn-light" @onclick="@(el => AppnedDigit(5))">5</button>
<button class="calc-btn-size-sm btn-sm btn-light" @onclick="@(el => AppnedDigit(6))">6</button>

<button class="calc-btn-size-sm btn-sm btn-light" @onclick="@(el => AddOperation(Operators.Devide))">/</button>
<br />

<button class="calc-btn-size-sm btn-sm btn-light" @onclick="@(el => AppnedDigit(7))">7</button>
<button class="calc-btn-size-sm btn-sm btn-light" @onclick="@(el => AppnedDigit(8))">8</button>
<button class="calc-btn-size-sm btn-sm btn-light" @onclick="@(el => AppnedDigit(9))">9</button>

<button class="calc-btn-size-sm btn-sm btn-light" @onclick="@(el => AddOperation(Operators.Subtract))">-</button>
<br />

<button class="calc-btn-size-sm btn-sm btn-light" @onclick="@(el => AppnedDigit(0))">0</button>


<button class="calc-btn-size-lg btn-sm btn-light" @onclick="@(el => AddOperation(Operators.Add))">+</button>
<br />

<button class="calc-btn-size-sm btn-sm btn-light" @onclick="ClearDigits">C</button>

<button class="calc-btn-size-sm btn-sm btn-light" style="padding-left: 4px" @onclick="ClearCalculation">CC</button>
<button class="calc-btn-size-sm btn-sm btn-light" @onclick="AddDecimal">.</button>
<button class="calc-btn-size-sm btn-sm btn-light" @onclick="Calculate">=</button>

<p>@output</p>





@code {


    string input = string.Empty;
    string output = string.Empty;

    Calculator calc = new Calculator();

    void AppnedDigit(int digit)
    {
        if (input.Length == 0 && digit == 0) return;
        if (calc.Operations.Count == 0) output = string.Empty;

        input = input + digit;
    }

    void AddOperation(Operators @operator)
    {
        if (input.Length.Equals(0) && @operator == Operators.Subtract)
        {
            input = "-";
            return;
        }
        var success = double.TryParse(input, out double value);
        if (success)
        {
            calc.AddOperation(new Operation(value, @operator));
            DisplayOutput();
            ClearDigits();
        }
    }

    void DisplayOutput()
    {
        output = string.Empty;
        foreach (var operations in calc.Operations)
        {
            output += $"{operations.Value} {operations.OperatorValue} ";
        }
        if (calc.Operations.Count() > 1)
        {
            var result = calc.Calculate();
            input = result.ToString();
            output = output.Substring(0, output.Length - 2);
            output += $"= {result}";
        }
    }

    void ClearDigits()
    {
        input = string.Empty;
    }

    void ClearCalculation()
    {
        calc = new Calculator();
        output = string.Empty;
        ClearDigits();
    }

    void AddDecimal()
    {
        if (!input.Contains("."))
        {
            input = input + ".";
        }
    }

    void Calculate()
    {
        var success = double.TryParse(input, out double value);

        if (success)
        {
            AddOperation(Operators.Equal);
            calc = new Calculator();
        }
    }


}
